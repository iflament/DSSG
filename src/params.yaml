
bot_threshold: 150
lat_min: 43.83
lat_max: 43.745
lon_min: 11.289
lon_max: 11.225

fountain_type_museum: 1
fountain_type_cdr: 2
minimum_calls_in_fc: 1
minimum_daily_calls: 5

fc_start_date: "2016-06-01"
fc_end_date: "2016-09-30"
fc_plot: True
fc_hour_time: "hour"
fc_date_time: "date"
fc_dow_time: "day_of_week"
fc_tdr_time: "hour"
fc_corr_method: "kendall"
fc_cm_time: "hour"
fc_hourdelta_subset: True
fc_hourdeltamin: 0
fc_hourdeltamax: 6
fc_below_threshold: -0.7
fc_above_threshold: 0.7
fc_timedelta: "day_of_week"
fc_hour_min: 7
fc_hour_max: 23
fc_geomap_timedelta: "hour"
fc_date_to_plot: "2016-06-01"
fc_min_timedelta: 7
fc_max_timedelta: 23

net_count: "total_people" # count (string): name of the column for the number of people moving along that edge at the instance
net_target: "to" # target (string): name of column for the destination of an edge
net_source: "from" #  source (string): name of column for the origin of an edge
net_join_column: "short_name" # join_column (string): the name of the column on which tos link the two data frames.
net_only_start: False
net_gap_length: 3
net_use_log_scale: False
net_lon: longitude
net_lat: latitude
net_vertex_label_color: "black"
net_edge_width: 0.5
net_site_source: 'Torre di Palazzo Vecchio'
net_site_target: 'M. Palazzo Vecchio'

fd_to_col_name: "to" # to_col_name (string): Name of the edges DataFrame column for the weight
fd_from_col_name: "from" # from_col_name (string): Name of the edges DataFrame column for from node
fd_weight_col_name: "weight" # weight_col_name (string): Name of the edges DataFrame column for to node. Only used for creating geojson from CDR data, not museums
fd_id_colname_fc: "museum_id" # id_col_name (string): Name of the museums DataFrame column for node id
fd_visitors_colname_fc: "visitors" # visitors_col_name (string): Name of the museums DataFrame column for number of visitors.
fd_id_colname_cdr: "tower_id" # id_col_name (string): Name of the densities DataFrame column for node id
fd_density_colname_cdr: "density" # density_col_name (string): Name of the densities DataFrame column for density.